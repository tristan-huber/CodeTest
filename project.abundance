{
    "atomType": "Molecule",
    "name": "CodeTest",
    "x": 0,
    "y": 0,
    "uniqueID": "09e14d64-8a6d-45a6-8d79-8a4b53c96a27",
    "ioValues": [],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "2472c18b-1c5c-4db6-8460-c0d652fd7bd4",
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "69571ba7-0e6c-4202-be46-6d2d781d2d22"
                }
            ],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.2727864583333333,
            "y": 0.5625,
            "uniqueID": "faf25742-ee63-4660-93f6-61373f099b54",
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 50
                },
                {
                    "name": "y length",
                    "ioValue": 10
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.4127604166666667,
            "y": 0.431547619047619,
            "uniqueID": "902265eb-1e76-4c47-b407-c968ea10559e",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "faf25742-ee63-4660-93f6-61373f099b54"
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negitive. "
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5846354166666666,
            "y": 0.6309523809523809,
            "uniqueID": "69571ba7-0e6c-4202-be46-6d2d781d2d22",
            "ioValues": [
                {
                    "name": "height",
                    "ioValue": 10
                },
                {
                    "name": "inputShape",
                    "ioValue": 10
                },
                {
                    "name": "dist",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[inputShape, dist, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      //Takes the address and gets the shape from the library\n      let importedShape = library[inputShape]\n      \n      //This makes a new copy of of the shape (to prevent garbage collection issues),\n      //and moves it in the X direction. Note that this will not work if the input is an assembly\n      let movedShape = importedShape.geometry[0].clone().translate([dist,0,0])\n      \n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      //return shape1\n      \n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new replicad.Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      //return shape2\n      \n      //If we want to return both shapes at once, we can create an assembly with them\n      let anAssembly = {\n        geometry: [shape1, shape2], \n        tags: [\"aNewTag\"],\n        color: '#A3CF5B',\n        plane: newPlane,\n        bom: []\n      }\n      \n      //And we can return that in the same way\n      return anAssembly\n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": "faf25742-ee63-4660-93f6-61373f099b54",
            "ap2ID": "902265eb-1e76-4c47-b407-c968ea10559e"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": "69571ba7-0e6c-4202-be46-6d2d781d2d22",
            "ap2ID": "2472c18b-1c5c-4db6-8460-c0d652fd7bd4"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": {},
    "filetypeVersion": 1
}